# Generated by Django 2.1.4 on 2019-01-03 09:22

import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Anime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, max_length=250)),
                ('publish_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('magnetic_link', models.CharField(default=None, max_length=250)),
                ('cover_img_link', models.CharField(default=None, max_length=250)),
                ('anime_video_quality', models.CharField(default=None, max_length=250)),
                ('anime_video_size', models.CharField(default=None, max_length=250)),
                ('author', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE,
                                             to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-create_date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, max_length=250)),
                ('publish_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('magnetic_link', models.CharField(default=None, max_length=250)),
                ('cover_img_link', models.CharField(default=None, max_length=250)),
                ('book_format',
                 models.CharField(choices=[('EPUB', 'epub'), ('PDF', 'pdf'), ('DOC', 'doc')], default='PDF',
                                  max_length=250)),
                ('book_author', models.CharField(default=None, max_length=250)),
                ('author', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE,
                                             to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-create_date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, max_length=250)),
                ('publish_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('magnetic_link', models.CharField(default=None, max_length=250)),
                ('cover_img_link', models.CharField(default=None, max_length=250)),
                ('movie_quality', models.CharField(default=None, max_length=250)),
                ('movie_size', models.CharField(default=None, max_length=250)),
                ('author', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE,
                                             to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-create_date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Movie_genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre_name', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('followers', models.ManyToManyField(related_name='following', to='blog.Profile')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile',
                                              to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Software',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, max_length=250)),
                ('publish_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('magnetic_link', models.CharField(default=None, max_length=250)),
                ('cover_img_link', models.CharField(default=None, max_length=250)),
                ('software_os', models.CharField(choices=[('Windows', 'windows'), ('Linux', 'linux'), ('Mac', 'mac')],
                                                 default='Windows', max_length=250)),
                ('software_size', models.CharField(default=None, max_length=250)),
                ('author', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE,
                                             to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-create_date'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='movie',
            name='movie_genre',
            field=models.ManyToManyField(to='blog.Movie_genre'),
        ),
    ]
